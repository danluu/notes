Notes from SystemVerilog for Design (Sutherland, Davidmann, and Flake)
* Questions
  When should we use task vs. function vs. module?
* Chapter 1
  Some intro stuff
* Chaoter 2: Namespaces (packages)
  Now have namespaces (via ::)
  It's not clear from the text if we can have foo::bar::baz, or merely foo::bar

  Also have struct, typedef, and enum

  Have static vs. automatic. Static is non-synthesizable? That seems weird. Can that be right?
  Seems odd because everything was static in Verilog 95
* Chapter 3 (literals and built-in data types)
  random gotcha:
  we can paramaterize the width of the following constants:
  0
  'bx
  'bz

  But, not 1s, since 1s don't get extended. We'd have to invert 0s to get that.

  logic is new. Basically same as reg
  Have bit for 2-state logic
  
  additionally, can specify signed vs. unsigned
  reg [63:0] default_unsigned;
  reg signed [63:0] signed;

  int/longint are signed by default and can be made unsigned. int = 32 bits, longint = 64 bits.

  The text notes that all automatic functions / tasks use 'dynamic' variables. This doesn't seem to refer to dynamic scope.
  Or, if it does, the explanation is weird.

  Can use automatic to create recursive functions

  Note that in Verilog 95 everything is static

  Clarificaiton on static vs. automatic from previous chapter
  static variable *initialization* isn't synthesizable, while automatic variable initializaiton is
  To use automatic in synthesis, make sure it's only used for temporary storage inside a function/task

  Variable initialization:
  Can now initialize outside of always blocks by assigning variable as it's declared

  There's also a section on casting. Skipping for now because it seems like a good idea to avoid casting at all?
* Chapter 4: User-Defined and Enumerated types
  Example typedef:
  typedef logic [3:0] nibble;
  nibble opA, opB;

  Can put typedefs like this in a package to share between modules

  User defined types: convention is to end name in _t

  enum: obvious use is for states in an FSM. This avoids explicitly mapping states to specific values?
  Can also autogenerate state names
  enum {RESET, S[5], W[6:9]} state;

  generates RESET, S0, ..., S4, W6, ..., W9
  seems weirdly inconsistent that we get S4 and W9

  Note that names live in normal variable scope, and are not attached to a specfic declaration, so we can't reset, e.g., RESET within a single scope

  enumerated types have methods: .first, .last, .next, .prev, .num, and .name
* Chapter 5: Arrays, structs, and unions
  Structs:
  can assign explicitly, or by using `{} and giving things in definition order
  Can also assign everything by doing `{default: 0}

  Normal structs treat variables independantly.
  Can also use a packed struct, where things are laid out contigiously. Values must be integral (e.g, bit, int, or logic).
  We can then do things like shift the whole struct 
  Packed structs act like one big vector

  To pass structs through ports, define as user defined type (typedef struct)

  Unions
  Like in C. Unpacked unions can contain any type and are not synthesizable

  packed union. Can use to, e.g., look at something as a bunch of bytes or some other data type:

  union packed {
    data_packet_t packet;
    logic [7:0][7:0] bytes;
  } dreg;

  Packed unions can be synthesized

  Arrays:
  Verilog style arrays are called unpacked arrays
  reg [5:0] blah [1023:0];

  We can also make packed arrays
  logic [3:0] [7:0] data;
  This is stored as data[3][7:0], ... ,data[0][7:0]

  We have a foreach operator that can be used on arrays. It gives us one index for each array dimension, 
  so it's really just like a nested for (*), and not like a normal foreach
* Chapter 6: Procedural Blocks, Tasks, and Functions
  Have always blocks as in Verilog
  Can specifiy always_ff, always_comb, or always_latch
  These have no real power. Warning based on putting bogus logic in these blocks is optional

  always_comb infers its sensitivity list is the obvious manner
  always_latch infers sensitivity list similarly
  always_ff requires a sensitivity list

  Tasks/Funcions: 
  In verilog, can only exit from the end. SV allows return statements

  Functions can't have delays or event controls, and can't use non-blocking statements.
  SV allows void functions, which lift some restrictions? This section isn't clear to me
  Or maybe not
  Functions can't call tasks, but functions can call void functions, which act like tasks (they're just statements)
  ???
  SV also adds 'output' and 'inout' to functions, so a void function to propogate changes outside its scope

  For synthesis, void functions are recommended over tasks
  Note: can't call functions with outputs in the following cases:
  event expression
  expression with procedural continuous assignment
  expression that isn't within a procedural statement

  Functions are normal call by value and not call by ref
  can use ref instead of input/output/inout intead, to get a reference
  Only automatic tasks/functions can use ref
  Can also use const ref
  
