* Synthesis gotchas
** sensitivity list / latching
   always blocks without posedge or negedge turn into latches, regardless of sensitivity list
   i.e., having an incomplete sensitivity list will cause incorrect pre-synthesis simulation
** ordering inside block
   using a temporary variable before it's assigned will not synthesize correctly

   always @ (a or b or c or d) begin
     o = a & b | temp;
     temp = c & d;
   end

   will synthesize to the same thing, even if we swap the two lines
   i.e., we'll get an and-or gate post-synthesis either way
** functions
   functions always produce combinational logic.
   Creating latching behavior will cause a problem
** case statements
   (synopsis)
   //synopsis full_case

   This says that case statement is fully defined; unused cases should be don't cares.
   In addition to the obvious effect,
   this can cause logic to get optimized away in synthesis

   //synopsis parallel_case
   
   This causes all cases to be tested in parallel, even if we have overlapping cases,
   where you'd normally get a priority encoder
